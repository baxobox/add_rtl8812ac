#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build OTA

on:
  push

env:
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: false
  CDN: jjm2473/cdn
  REPO_VERSION: 18.06.9
  TZ: Asia/Shanghai
  TARGET_WITH_MODULES: z9s

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    name: ${{ matrix.target }}
    strategy:
      matrix:
        target: [z9s, x9s]
    env:
      CONFIG_FILE: "${{ matrix.target }}.config"
      FALLBACK_DEVICE_NAME: "${{ matrix.target }}"
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          path: 'openwrt'

      - name: Bump config
        run: |
          tar -c -C openwrt/.github/workflows . | tar -x
          ls ./
          rm -rf openwrt/.github/workflows

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo swapoff /swapfile || true
          sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
          sudo -E apt-get -qq install default-jre
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          # curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          ../$DIY_P1_SH

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Overwrite
        run: |
          [ -e overwrite ] && (tar -c -C overwrite . | tar -x -C openwrt)

      - name: Update feeds index
        run: cd openwrt && ./scripts/feeds update -ai

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          ../$DIY_P2_SH

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: github.event.inputs.ssh == 'true' || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Write build key
        if: env.BUILD_KEY != '' && env.BUILD_KEY_PUB != ''
        env:
          BUILD_KEY: ${{ secrets.BUILD_KEY }}
          BUILD_KEY_PUB: ${{ secrets.BUILD_KEY_PUB }}
        run: |
          cd openwrt
          echo -e "$BUILD_KEY" > key-build
          echo -e "$BUILD_KEY_PUB" > key-build.pub

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || bash -c 'set -o pipefail ; make -j1 V=s 2>&1 | tee /tmp/openwrt-build.log'
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          if [ -s DEVICE_NAME ]; then
            echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          else
            echo "DEVICE_NAME=_${FALLBACK_DEVICE_NAME}" >> $GITHUB_ENV
          fi
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Last fail log
        if: failure()
        run: tail -n 200 /tmp/openwrt-build.log

      - name: Show Config
        if: failure()
        run: cat openwrt/.config

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files
        id: organize
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          mv packages ../../../../tmp/
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "TARGET_DIR=$(echo $PWD | sed 's#^.*/openwrt/bin/##')" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Upload firmware to cowtransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"

      - name: Upload firmware to WeTransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"

      - name: Fetch CDN
        uses: actions/checkout@v2
        if: steps.organize.outputs.status == 'success' && env.CDN != '' && !cancelled()
        with:
          token: ${{ secrets.CDN_TOKEN }}
          repository: ${{ env.CDN }}
          fetch-depth: 2
          path: cdn

      - name: Push CDN
        if: steps.organize.outputs.status == 'success' && env.CDN != '' && !cancelled()
        run: |
          git config --global user.name "Actions"
          git config --global user.email "actions@github.com"
          mv ${FIRMWARE}/sha256sums ${FIRMWARE}/sha256sums.new
          sed -i '/ *config.seed$/d' ${FIRMWARE}/sha256sums.new
          mv ${FIRMWARE}/config.seed ${FIRMWARE}/$CONFIG_FILE
          
          for first in true false; do
            [ -f cdn/.reset ] && git -C cdn reset HEAD^
            mkdir -p cdn/openwrt/release/${REPO_VERSION}/${TARGET_DIR}
            cat ${FIRMWARE}/sha256sums.new >> cdn/openwrt/release/${REPO_VERSION}/${TARGET_DIR}/sha256sums
            tar -cC ${FIRMWARE} . | tar -xC cdn/openwrt/release/${REPO_VERSION}/${TARGET_DIR}
            rm -f cdn/openwrt/release/${REPO_VERSION}/${TARGET_DIR}/sha256sums.new
            [ "$FALLBACK_DEVICE_NAME" == "$TARGET_WITH_MODULES" ] && cp -a openwrt/bin/packages cdn/openwrt/release/${REPO_VERSION}/
            [ "$FALLBACK_DEVICE_NAME" == "$TARGET_WITH_MODULES" ] && cp -a openwrt/tmp/packages cdn/openwrt/release/${REPO_VERSION}/${TARGET_DIR}/
            git -C cdn add --all
            git -C cdn commit -m 'release'
            if git -C cdn push `[ -f cdn/.reset ] && echo -f`; then
              break
            elif $first; then
              git -C cdn reset --hard HEAD^ && git -C cdn pull
            else
              exit -1
            fi
          done
